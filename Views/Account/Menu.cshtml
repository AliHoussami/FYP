@model IEnumerable<TEST2.Models.MenuItemModel>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Restaurant.RestaurantName</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #e8f5f5; /* Light teal background */
            margin: 0;
            padding: 0;
        }

        /* Hero Section */
        .hero-section {
            position: relative;
            height: 500px;
            background-size: cover;
            background-position: center;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            background: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.8)), url(@ViewBag.Restaurant.ImageUrl);
        }

            .hero-section h1 {
                font-size: 3.5rem;
                font-weight: bold;
                margin-bottom: 15px;
            }

            .hero-section p {
                font-size: 1.2rem;
                font-weight: 300;
                color: rgba(255, 255, 255, 0.8);
            }

        /* Restaurant Info Section */
        .restaurant-info {
            padding: 30px;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            margin-bottom: 50px;
        }

            .restaurant-info h2 {
                font-size: 2.2rem;
                margin-bottom: 20px;
                color: #004d40; /* Dark teal */
            }

        .info-group {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #ddd;
        }

            .info-group:last-child {
                border-bottom: none;
            }

            .info-group strong {
                font-size: 1.1rem;
                color: #004d40; /* Dark teal */
            }

            .info-group span {
                font-size: 1rem;
                color: #555;
            }

        /* Menu Section */
        .menu-section {
            padding: 30px;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

            .menu-section h2 {
                font-size: 2.2rem;
                margin-bottom: 20px;
                color: #004d40; /* Dark teal */
            }

        .menu-card {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
        }

            .menu-card:hover {
                transform: scale(1.02);
            }

            .menu-card img {
                width: 150px;
                height: 150px;
                object-fit: cover;
            }

            .menu-card .details {
                flex-grow: 1;
                padding: 15px;
            }

                .menu-card .details h5 {
                    font-size: 1.5rem;
                    font-weight: bold;
                    margin: 0;
                    color: #004d40; /* Dark teal */
                }

                .menu-card .details p {
                    font-size: 1rem;
                    color: #555;
                    margin: 8px 0 12px;
                }

                .menu-card .details .price {
                    font-size: 1.2rem;
                    font-weight: bold;
                    color: #388e3c; /* Dark green */
                }

        /* Customization Dropdown */
        .customization-dropdown {
            display: none; /* Initially hidden */
            margin-top: 10px;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px;
            background-color: #f8f9fa;
        }

            .customization-dropdown label {
                font-size: 0.9rem;
                font-weight: bold;
                color: #004d40; /* Dark teal */
            }

        /* View Cart Button */
        .view-cart {
            background-color: #00e5ff; /* Electric cyan */
            border: 2px solid #00b8d4; /* Slightly darker border */
            color: #ffffff; /* White text for contrast */
            font-weight: bold; /* Bold text */
            font-size: 1.2rem; /* Larger font size */
            padding: 15px 30px; /* Larger padding for a bigger button */
            border-radius: 10px; /* Rounded edges */
            text-transform: uppercase; /* Make the text uppercase */
            box-shadow: 0 8px 15px rgba(0, 229, 255, 0.5); /* Glowing shadow effect */
            transition: all 0.3s ease-in-out; /* Smooth hover effect */
        }

            .view-cart:hover {
                background-color: #00b8d4; /* Slightly darker on hover */
                color: #ffffff; /* Ensure text stays white */
                transform: scale(1.1); /* Slightly enlarge the button */
                box-shadow: 0 12px 20px rgba(0, 184, 212, 0.8); /* More pronounced glow on hover */
            }
    </style>
</head>
<body>

    <!-- Hero Section -->
    <div class="hero-section">
        <div>
            <h1>@ViewBag.Restaurant.RestaurantName</h1>
            <p>@ViewBag.Restaurant.Description</p>
        </div>
    </div>

    <!-- Restaurant Info Section -->
    <div class="container">
        <div class="restaurant-info">
            <h2>About the Restaurant</h2>
            <div class="info-group">
                <strong>Phone:</strong>
                <span>@ViewBag.Restaurant.Phone</span>
            </div>

            <div class="info-group">
                <strong>Email:</strong>
                <span>@ViewBag.Restaurant.Email</span>
            </div>

            <div class="info-group">
                <strong>Address:</strong>
                <span>@ViewBag.Restaurant.Address</span>
            </div>

            <div class="info-group">
                <strong>City:</strong>
                <span>@ViewBag.Restaurant.City</span>
            </div>

            <div class="info-group">
                <strong>Postal Code:</strong>
                <span>@ViewBag.Restaurant.PostalCode</span>
            </div>

            <div class="info-group">
                <strong>Opening Hours:</strong>
                <span>@ViewBag.Restaurant.OpeningHours</span>
            </div>

            <div class="info-group">
                <strong>Rating:</strong>
                <span>@ViewBag.Restaurant.Rating</span>
            </div>
        </div>

        <!-- Menu Section -->
        <div class="menu-section">
            <h2>Menu</h2>

            @foreach (var item in Model)
            {
                <div class="menu-card">
                    <div class="details">
                        <h5>@item.ItemName</h5>
                        <p>@item.Description</p>
                        <div class="price">$@item.Price</div>
                        <button class="btn btn-primary add-to-cart"
                                data-id="@item.MenuItemId"
                                onclick="addToCart(this)">
                            Add to Cart
                        </button>


                        <!-- Customize Button -->
                        <button class="btn btn-secondary customize-btn"
                                onclick="toggleCustomizationDropdown(this)">
                            Customize
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="text-end mb-3">
            <a href="@Url.Action("Cart", "Account")" class="btn view-cart">View Cart</a>
        </div>


    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Add to Cart Script
        function addToCart(button) {
            const menuItemId = button.getAttribute('data-id');
            if (!menuItemId) {
                alert("Menu item ID is missing.");
                return;
            }

            const cartData = {
                MenuItemId: parseInt(menuItemId),
                Quantity: 1, // Default quantity
                Customizations: "" // No customizations by default
            };
            fetch('/api/cart/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(cartData)
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        return response.json().then(error => {
                            throw new Error(error.message || "Unexpected server error.");
                        });
                    }
                })
                .then(data => {
                    if (data.success) {
                        alert("Item successfully added to cart!");
                    } else {
                        alert(data.message || "Failed to add item to cart.");
                    }
                })
                .catch(error => {
                    console.error("Error adding item to cart:", error);
                    alert(`An error occurred: ${error.message}`);
                });
        }




        // Toggle Customization Dropdown
        function toggleCustomizationDropdown(button) {
            // Locate the parent menu card
            const menuCard = button.closest('.menu-card');
            if (!menuCard) {
                alert("Menu card container not found!");
                return;
            }

            // Check if a customization dropdown already exists
            let dropdown = menuCard.querySelector('.customization-dropdown');
            if (dropdown) {
                // Toggle the dropdown's visibility
                dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
                return;
            }

            // Create a new dropdown if it doesn't exist
            dropdown = document.createElement('div');
            dropdown.className = 'customization-dropdown mt-3';
            dropdown.innerHTML = `
                    <label for="customization">Choose Customization:</label>
                    <select class="form-select mb-3" id="customization">
                        <option value="">-- Select --</option>
                        <option value="Extra Cheese">Extra Cheese</option>
                        <option value="No Sauce">No Sauce</option>
                        <option value="Spicy">Spicy</option>
                    </select>
                    <label for="quantity">Quantity:</label>
                    <input type="number" class="form-control mb-3" id="quantity" value="1" min="1">
                    <button class="btn btn-primary" onclick="submitCustomization(this)">Add Customization</button>
                `;

            // Append the dropdown to the menu card
            menuCard.appendChild(dropdown);
        }

        // Submit Customization Script
        function submitCustomization(button) {
            // Locate the parent dropdown
            const dropdown = button.closest('.customization-dropdown');
            if (!dropdown) {
                alert("Customization dropdown not found!");
                return;
            }

            // Get customization and quantity values
            const customization = dropdown.querySelector('#customization').value;
            const quantity = dropdown.querySelector('#quantity').value;

            if (!customization) {
                alert("Please select a customization option.");
                return;
            }

            if (quantity <= 0) {
                alert("Please enter a valid quantity.");
                return;
            }

            // Get MenuItemId from the parent menu card
            const menuCard = dropdown.closest('.menu-card');
            const menuItemId = menuCard.querySelector('.add-to-cart').getAttribute('data-id');

            if (!menuItemId) {
                alert("Menu item ID is missing.");
                return;
            }

            // Construct the cart data
            const cartData = {
                MenuItemId: parseInt(menuItemId),
                Quantity: parseInt(quantity),
                Customizations: customization
            };

            // Make a POST request to the Add Customization API
            fetch('/api/cart/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(cartData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert("Customization successfully added to cart!");
                        dropdown.style.display = 'none'; // Optionally hide the dropdown
                    } else {
                        alert(data.message || "Failed to add customization.");
                    }
                })
                .catch(error => {
                    console.error("Error adding customization:", error);
                    alert("An error occurred. Please try again.");
                });
        }
    </script>

</body>
</html>
