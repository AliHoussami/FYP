@model IEnumerable<TEST2.Models.CartItemModel>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* General Styles */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #e8f5f5; /* Light teal background */
            margin: 0;
            padding: 0;
        }

        .cart-container {
            margin: 50px auto;
            max-width: 900px;
            background: #fff; /* White background for contrast */
            border-radius: 8px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            padding: 20px;
            border: 2px solid #00796b; /* Dark teal border */
        }

        .cart-header {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 20px;
            text-align: center;
            color: #004d40; /* Dark teal */
        }

        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #ddd;
        }

            .cart-item:last-child {
                border-bottom: none;
            }

            .cart-item h5 {
                margin: 0;
                font-size: 1.2rem;
                color: #004d40; /* Dark teal */
            }

            .cart-item small {
                color: #00796b; /* Teal for customization text */
            }

            .cart-item p {
                margin: 5px 0;
                color: #004d40; /* Dark teal */
            }

            .cart-item .price {
                font-size: 1.1rem;
                font-weight: bold;
                color: #388e3c; /* Dark green for price */
            }

        .cart-total {
            font-size: 1.5rem;
            font-weight: bold;
            text-align: right;
            margin-top: 20px;
            color: #004d40; /* Dark teal */
        }

        .cart-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .btn-danger {
            background-color: #d32f2f !important; /* Bright red for remove button */
            border-color: #b71c1c !important;
        }

            .btn-danger:hover {
                background-color: #b71c1c !important;
                border-color: #7f0000 !important;
            }

        .btn-secondary {
            background-color: #00796b !important; /* Dark teal for clear cart */
            border-color: #004d40 !important;
        }

            .btn-secondary:hover {
                background-color: #004d40 !important;
                border-color: #00251a !important;
            }

        .btn-success {
            background-color: #388e3c !important; /* Dark green for checkout */
            border-color: #2e7d32 !important;
        }

            .btn-success:hover {
                background-color: #2e7d32 !important;
                border-color: #1b5e20 !important;
            }

        .empty-cart {
            text-align: center;
            font-size: 1.2rem;
            color: #777;
            margin-top: 30px;
        }

        .empty-cart-icon {
            font-size: 4rem;
            color: #004d40; /* Dark teal */
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container cart-container">
        <div class="cart-header">Your Cart</div>

        @if (Model != null && Model.Any())
        {
            @foreach (var item in Model)
            {
                <div class="cart-item">
                    <div class="cart-item">
                        <h5>@item.ItemName</h5>
                        <p>Quantity: @item.Quantity</p>
                        <p>Customizations: @item.Customizations</p>
                        <p>Price: $@item.Price</p>
                        <p>Total: $@(item.Price * item.Quantity)</p>
                    </div>
                    <div class="price">$@(item.Price * item.Quantity)</div>
                    <button class="btn btn-danger btn-sm" onclick="removeFromCart(@item.CartItemId)">Remove</button>
                </div>
            }

            <div class="cart-total">
                Total: $@(Model.Sum(i => i.Price * i.Quantity))
            </div>

            <div class="cart-actions">
                <button class="btn btn-secondary" onclick="clearCart()">Clear Cart</button>
                <a href="/Checkout" class="btn btn-success">Proceed to Checkout</a>
            </div>
        }
        else
        {
            <div class="empty-cart">
                <div class="empty-cart-icon">🛒</div>
                Your cart is empty.
            </div>
        }
    </div>


    <script>
        function removeFromCart(cartItemId) {
            if (confirm("Are you sure you want to remove this item from the cart?")) {
                showLoadingSpinner();
                fetch(`/api/cart/remove/${cartItemId}`, {
                    method: 'DELETE'
                })
                    .then(response => response.json())
                    .then(data => {
                        hideLoadingSpinner();
                        if (data.success) {
                            alert('Item removed from cart.');
                            location.reload();
                        } else {
                            alert('Failed to remove item.');
                        }
                    })
                    .catch(error => {
                        hideLoadingSpinner();
                        console.error('Error removing item:', error);
                        alert('An error occurred. Please try again.');
                    });
            }
        }

        function clearCart() {
            if (confirm("Are you sure you want to clear the entire cart?")) {
                showLoadingSpinner();
                fetch('/api/cart/clear', {
                    method: 'DELETE'
                })
                    .then(response => response.json())
                    .then(data => {
                        hideLoadingSpinner();
                        if (data.success) {
                            alert('Cart cleared.');
                            location.reload();
                        } else {
                            alert('Failed to clear cart.');
                        }
                    })
                    .catch(error => {
                        hideLoadingSpinner();
                        console.error('Error clearing cart:', error);
                        alert('An error occurred. Please try again.');
                    });
            }
        }

        function showLoadingSpinner() {
            document.body.insertAdjacentHTML('beforeend', `
                <div id="loading-spinner" style="
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    z-index: 1000;
                    background-color: rgba(255, 255, 255, 0.8);
                    padding: 20px;
                    border-radius: 10px;
                    text-align: center;
                ">
                    <div class="spinner-border text-primary" role="status"></div>
                    <p>Processing...</p>
                </div>
            `);
        }

        function hideLoadingSpinner() {
            const spinner = document.getElementById('loading-spinner');
            if (spinner) spinner.remove();
        }
    </script>
</body>
</html>
